generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum UserType {
  ADMIN
  COUPLE
  INVITEE
}

enum EventType {
  WEDDING
  BIRTHDAY
  BABY_SHOWER
}

enum TransactionStatus {
  OPEN
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])

  @@index([userId])
}

model User {
  id               String    @id @default(auto()) @map("_id") @db.ObjectId
  name             String?
  lastName         String?
  email            String?   @unique
  password         String?
  emailVerified    DateTime?
  image            String?
  role             UserType  @default(COUPLE)
  isOnboarded      Boolean   @default(false)
  hasPYbankAccount Boolean   @default(false)
  isMagicLinkLogin Boolean   @default(false)
  onboardingStep   Int       @default(1)

  accounts           Account[]
  sessions           Session[]
  eventPrimaryUser   Event[]   @relation("primaryUser")
  eventSecondaryUser Event[]   @relation("secondaryUser")
}

model Event {
  id              String    @id @default(auto()) @map("_id") @db.ObjectId
  name            String?
  primaryUserId   String    @db.ObjectId
  secondaryUserId String    @db.ObjectId
  date            DateTime?
  location        String?
  url             String?   @unique
  wishlistId      String    @db.ObjectId
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  country         String?
  city            String?

  wishList           WishList       @relation(fields: [wishlistId], references: [id])
  eventPrimaryUser   User?          @relation("primaryUser", fields: [primaryUserId], references: [id])
  eventSecondaryUser User?          @relation("secondaryUser", fields: [secondaryUserId], references: [id])
  gifts              Gift[]
  wishlistGifts      WishListGift[]

  @@unique([wishlistId])
  @@unique([secondaryUserId])
  @@unique([primaryUserId])
}

model WishList {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  event         Event?
  wishListGifts WishListGift[]
}

model Gift {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  name            String
  categoryId      String   @db.ObjectId
  price           String
  imageUrl        String?
  isDefault       Boolean  @default(false)
  isEditedVersion Boolean  @default(false)
  eventId         String?  @db.ObjectId
  giftlistId      String?  @db.ObjectId
  sourceGiftId    String?  @db.ObjectId
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  giftlist      GiftList?      @relation(fields: [giftlistId], references: [id])
  event         Event?         @relation(fields: [eventId], references: [id])
  wishListGifts WishListGift[]
}

model WishListGift {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  isFavoriteGift Boolean  @default(false)
  isGroupGift    Boolean  @default(false)
  groupGiftParts String?
  isFullyPaid    Boolean  @default(false)
  isReceived     Boolean  @default(false)
  wishListId     String   @db.ObjectId
  giftId         String   @db.ObjectId
  eventId        String?  @db.ObjectId
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  wishList     WishList      @relation(fields: [wishListId], references: [id])
  gift         Gift          @relation(fields: [giftId], references: [id])
  event        Event?        @relation(fields: [eventId], references: [id])
  transactions Transaction[]

  @@index([wishListId])
  @@index([giftId])
}

model Transaction {
  id             String            @id @default(auto()) @map("_id") @db.ObjectId
  wishListGiftId String            @db.ObjectId
  amount         String
  status         TransactionStatus @default(PENDING)
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt

  wishListGift WishListGift @relation(fields: [wishListGiftId], references: [id])

  @@index([wishListGiftId])
}

model GiftList {
  id         String  @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  quantity   String?
  categoryId String  @db.ObjectId
  totalPrice String?

  gifts Gift[]
}

model Category {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  name String @unique
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model PasswordResetToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}
