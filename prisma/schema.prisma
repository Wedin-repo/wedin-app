generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum UserType {
  ADMIN
  COUPLE
  INVITEE
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])

  @@index([userId])
}

model User {
  id               String    @id @default(auto()) @map("_id") @db.ObjectId
  name             String?
  lastName         String?
  email            String?   @unique
  password         String?
  emailVerified    DateTime?
  image            String?
  role             UserType  @default(COUPLE)
  isOnboarded      Boolean   @default(false)
  hasPYbankAccount Boolean   @default(false)
  isMagicLinkLogin Boolean   @default(false)
  onboardingStep   Int       @default(1)

  accounts           Account[]
  sessions           Session[]
  eventPrimaryUser   Event[]   @relation("Bride")
  eventSecondaryUser Event[]   @relation("Groom")
}

model Event {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  name       String?
  brideId    String    @db.ObjectId
  groomId    String    @db.ObjectId
  date       DateTime?
  location   String?
  url        String?   @unique
  wishlistId String    @db.ObjectId
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  country    String?
  city       String?

  wishList WishList @relation(fields: [wishlistId], references: [id])
  bride    User?    @relation("Bride", fields: [brideId], references: [id])
  groom    User?    @relation("Groom", fields: [groomId], references: [id])
  Gift     Gift[]

  @@unique([wishlistId])
  @@unique([groomId])
  @@unique([brideId])
}

model WishList {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  giftIds   String[] @db.ObjectId

  gifts Gift[] @relation(fields: [giftIds], references: [id])
  event Event?
}

model Gift {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  name            String
  giftlistId      String?  @db.ObjectId
  isDefault       Boolean  @default(false)
  categoryId      String   @db.ObjectId
  eventId         String?  @db.ObjectId
  wishListIds     String[] @db.ObjectId
  imageUrl        String?
  // imageId         String?  @db.ObjectId
  price           String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  isFavoriteGift  Boolean  @default(false)
  isGroupGift     Boolean  @default(false)
  isEditedVersion Boolean  @default(false)
  sourceGiftId    String?  @db.ObjectId

  wishLists WishList[] @relation(fields: [wishListIds], references: [id])
  giftlist  GiftList?  @relation(fields: [giftlistId], references: [id])
  event     Event?     @relation(fields: [eventId], references: [id])
  // image     Image?     @relation(fields: [imageId], references: [id])
}

model GiftList {
  id         String  @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  quantity   String?
  categoryId String  @db.ObjectId
  totalPrice String?

  gifts Gift[]
}

model Category {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  name String @unique
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model PasswordResetToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}
